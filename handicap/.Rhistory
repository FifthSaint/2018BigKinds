install.packages("DescTools")
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
?XLView
install.packages("RDCOClient")
install.packages("RDCOMClient")
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
library(RDCOMClient)
XLGetRange(header=TRUE)
XLGetRange(header=TRUE)
XLGetRange(header=TRUE)
XLGetRange(header=TRUE)
XLGetRange()
XLGetRange()
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
library(RDCOMClient)
XLGetRange(header=TRUE)
?XLGetRange
XLGetRange(header=TRUE)
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
library(RDCOMClient)
XLGetRange(header=TRUE)
XLGetRange(header=TRUE)
mydata <- XLGetRange(header=TRUE)
XLView(d.pizza)
?XLView
View(mydata)
Desc(d.pizza$temperature)
Desc(d.pizza$driver)
Desc(temperature ~ delivery_min, d.pizza)
# 숫자 변수와 문자 변수를 결합해 분석해 볼까요
Desc(delivery_min ~ driver, d.pizza)
# 숫자 변수와 문자 변수를 결합해 분석해 볼까요
Desc(delivery_min ~ area, d.pizza)
# 숫자 변수와 문자 변수를 결합해 분석해 볼까요
Desc(delivery_min ~ area, d.pizza)
# 문자 변수끼리 결합하면 어떤 결과가 나올까요?
Desc(area ~ driver, d.pizza)
# 문자 변수끼리 결합하면 어떤 결과가 나올까요?
Desc(area ~ driver, d.pizza)
install.packages("DescTools")
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
install.packages("DescTools")
# 사용을 위해 라이브러리 등록을 해줍니다
library(DescTools)
install.packages("RDCOMClient")
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
library(RDCOMClient)
XLGetRange(header=TRUE)
XLGetRange(header=TRUE)
mydata <- XLGetRange(header=TRUE)
View(mydata)
XLView(d.pizza)
Desc(d.pizza$temperature)
Desc(d.pizza$driver)
Desc(temperature ~ delivery_min, d.pizza)
# 숫자 변수와 문자 변수를 결합해 분석해 볼까요
# 배달 시간과 지역의 관계를 한번 살펴 봅니다
Desc(delivery_min ~ area, d.pizza)
# 문자 변수끼리 결합하면 어떤 결과가 나올까요?
Desc(area ~ driver, d.pizza)
install.packages("rvest")
install.packages("dplyr")
url <- "http://www.hani.co.kr/arti/science/home01.html"
read_html(url)
library(rvest)
library(dplyr)
read_html(url)
html <- read_html(url)
html %>%
html_nodes("#contents-section > div.section-animal > div.animal-top > div.animal-top-article > h4 > a")
html %>%
html_nodes("#contents-section > div.section-animal > div.animal-top > div.animal-top-article > h4 > a")
html %>%
html_nodes("#contents-section > div.section-animal > div.animal-top > div.animal-top-article > h4 > a")
html %>%
html_nodes("#contents-section > div.section-animal > div.animal-top > div.animal-top-article > h4 > a") %>%
html_text()
url <- "http://www.hani.co.kr/arti/science/technology/868357.html"
html <- read_html(url)
html %>%
html_nodes("#a-left-scroll-in > div.article-text > div > div.text") %>%
html_text()
text <- html %>%
html_nodes("#a-left-scroll-in > div.article-text > div > div.text") %>%
html_text()
text
headline <- html %>%
html_nodes("#article_view_headline > h4 > span") %>%
html_text()
text <- html %>%
html_nodes("#a-left-scroll-in > div.article-text > div > div.text") %>%
html_text()
result <- data.frame( 제목=headline,
본문=text)
View(result)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("01_hello")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui, server)
install.packages("googleVis")
library(googleVis)
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(M1)
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(M1)
d <- data.frame(
gender = c("M", "M", "F", "F", "M", "F"),
age = c(23, 26, 25, 37, 55, 22),
income = c(150, 300, 250, 350, 800, 120))
dd$over25 <- ifelse(d$age > 25, 1, 0)
d <- data.frame(
gender = c("M", "M", "F", "F", "M", "F"),
age = c(23, 26, 25, 37, 55, 22),
income = c(150, 300, 250, 350, 800, 120))
View(d)
split(d$income, d$gender)
s <- split(d$income, d$gender)
View(s)
s
#현재의 디렉토리주소 알아보기
getwd()
#디렌토리 주소 재설정
setwd("C:/Users/hannews/Documents/GitHub/2018BigKinds/handicap")
#폴더 안의 파일들 확인하기
list.files()
library(readxl)
d <- readxl("handicap.xlsx")
d <- read_excel("handicap.xlsx")
View(d)
# 칼럼의 수
nc <-ncol(d)
nc
# 3개씩 분할
m = nc / c
# 3개씩 분할
m = nc / c
# 3개씩 분할
m = nc / 3
# 분할
df1<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
View(df1)
# stopwords 제거
library(dplyr)
stopwords <- c("장애인", "장애자", "경우")
df1[1]
t <- filter(df1[1], grepl(paste(stopwords, collapse="|"), vectordata))
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), vectordata))
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), '1'$vectordata))
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), vectordata))
typeof(df1[1])
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|")))
t <- dplyr::filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), vectordata))
# stopwords 제거
library(stats)
library(dplyr)
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), vectordata))
colnames(df1[1])
colnames(as.data.frame(df1[1]))
t <- filter(as.data.frame(df1[1]), grepl(paste(stopwords, collapse="|"), X1.vectordata))
View(t)
colnames(as.data.frame(df1[2]))
t <- filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
View(t)
typeof(t)
df2 <- list()
df2[1] <- filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
df2[1]
df2
View(df2)
View(df1)
df1[1] <- filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
df1[1]
df1[2]
t
#현재의 디렉토리주소 알아보기
getwd()
#폴더 안의 파일들 확인하기
list.files()
library(readxl)
# 변환할 파일 읽어들이기
d <- read_excel("handicap.xlsx")
# 칼럼의 수
nc <-ncol(d)
# 3개씩 분할
m = nc / 3
# 분할
df1<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word", "Freq", "Year")
View(df2)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
View(df2)
df1[1]
filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
library(dplyr) #filter
df1[1] <- filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
stopwords <- c("장애인", "장애자", "경우")
df1[1] <- filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
filter(as.data.frame(df1[2]), !grepl(paste(stopwords, collapse="|"), X2.vectordata))
colnames(df1[2])
df1[3]
# 분할
df1<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
df1[1]
filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata))
df2
df2 <- rbind(df2, filter(as.data.frame(df1[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata)))
df2
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
# 루프
for (i in 1:29) {
df2 <- rbind(df2, filter(as.data.frame(df1[i]), !grepl(paste(stopwords, collapse="|"), X1.vectordata)))
}
colname <- paste0("X", i, ".vectordata")
# 분할
df1<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
stopwords <- c("장애인", "장애자", "경우")
i = 1
df2 <- rbind(df2, filter(as.data.frame(df1[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
library(dplyr) #filter
df2 <- rbind(df2, filter(as.data.frame(df1[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
colnames(df1[2])
df1[1]
df1[2]
colnames(df1[2])
# 칼럼 이름 확인
colnames(df1[1])
typeof(df1[1])
colnames(as.data.frame(df1[2]))
# 변환할 파일 읽어들이기
d <- read_excel("handicap2.xlsx")
colnames(as.data.frame(df1[29]))
# 분할
df<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
colnames(as.data.frame(df[29]))
# 칼럼 이름 확인
colnames(df1[1])
# 칼럼 이름 확인
colnames(as.data.frame(df1[1]))
# 변환할 파일 읽어들이기
d <- read_excel("handicap2.xlsx")
# 분할
df<-lapply(split(as.list(d), cut(1:nc, m, labels = FALSE)), as.data.frame)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
library(dplyr) #filter
# 칼럼 이름 확인
colnames(as.data.frame(df1[1]))
colname <- paste0("X", i, ".vectordata", i)
colname
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df2 <- rbind(df2, filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
}
library(dplyr) #filter
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df2 <- rbind(df2, filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
}
View(d)
colnames(as.data.frame(df[1]))
filter(as.data.frame(df[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata1)
)
a <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
a <- filter(as.data.frame(df[1]), !grepl(paste(stopwords, collapse="|"), X1.vectordata1)
)
typeof(a)
typeof(df2)
colname <- paste0("X", 2, ".vectordata", 2)
colname
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df2 <- rbind(df2, filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
}
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df2 <- rbind(df2, filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(colname)))))
}
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df2 <- rbind(df2, filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname)))))
}
a
typeof(a)
a[1]
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname)))) %>%
data.frame("Word"=df1[1],
"Freq"=df1[2],
"Year"=df1[3]
)
df2 <- rbind(df2, df1)
}
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname)))) %>%
data.frame("Word"=unlist(df1[1]),
"Freq"=unlist(df1[2]),
"Year"=unlist(df1[3])
)
df2 <- rbind(df2, df1)
}
View(df1)
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname))))
df0 %>% data.frame("Word"=df1[1],
"Freq"=df1[2],
"Year"=df1[3])
df2 <- rbind(df2, df0)
}
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname))))
df0 <- data.frame("Word"=df1[1],
"Freq"=df1[2],
"Year"=df1[3])
df2 <- rbind(df2, df0)
}
df0 <- data.frame("Word"=a[1], "freq"=a[2], "year"=a[3])
View(df0)
View(a)
df0 <- data.frame(Word=a[1], freq=a[2], year=a[3])
View(df0)
df0 <- data.frame(Word=a[1], freq=a[2], year=a[3], stringsAsFactors = FALSE)
View(df0)
colnamse(df0)
colnames(df0)
dft<- data.frame( a=a$X1.vectordata1, b=a$X1.Freq, c=a$X1.year)
View(dft)
df0<- data.frame( Word=a$X1.vectordata1, freq=a$X1.Freq, year=a$X1.year)
View(df0)
a
colnames(a) <- c("d", "e", "f")
a
# 루프 -> 미완
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname))))
colnames(df1) <-c("Word", "Freq", "Year")
df2 <- rbind(df2, df1)
}
View(df1)
View(df2)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
View(df2)
# 루프 -> 미완
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname))))
colnames(df1) <-c("Word", "Freq", "Year")
df2 <- rbind(df2, df1)
}
View(df2)
#출고
write.table(df2, file="handi_gap.csv", sep=",")
#출고
write.table(df2, file="handi_gap.csv", sep=",", row.names=FALSE)
stopwords <- c("장애인", "장애자", "경우", "백억", "경우", "내년", "때문", "올해",
"이날", "가운데", "관련", "지난해", "우리", "이상", "만원", "시간")
View(a)
a[-(21:),]
a[-(21:30)]
a[-(21:30),]
a[-(21:nrow(df1)),]
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
stopwords <- c("장애인", "장애자", "경우", "백억", "경우", "내년", "때문", "올해",
"이날", "가운데", "관련", "지난해", "우리", "이상", "만원", "시간")
# 칼럼 이름 확인
colnames(as.data.frame(df1[1]))
# 칼럼 이름 확인
colnames(as.data.frame(df[1]))
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname)))) #스탑워드 제거
df1[-(21:nrow(df1)),] #20개만 남김
colnames(df1) <-c("Word", "Freq", "Year")
df2 <- rbind(df2, df1)
}
View(df2)
#출고
write.table(df2, file="handi_gap.csv", sep=",", row.names=FALSE)
#################
# stopwords 제거
#################
#빌드할 데이터 프레임 정의
df2 <- data.frame("Word"=character(),
"Freq"=integer(),
"Year"=as.Date(character(), "%Y"))
# 루프
for (i in 1:29) {
colname <- paste0("X", i, ".vectordata", i)
df1 <- filter(as.data.frame(df[i]), !grepl(paste(stopwords, collapse="|"), eval(parse(text=colname)))) #스탑워드 제거
df1 <- df1[-(21:nrow(df1)),] #20개만 남김
colnames(df1) <-c("Word", "Freq", "Year")
df2 <- rbind(df2, df1)
}
#출고
write.table(df2, file="handi_gap.csv", sep=",", row.names=FALSE)
